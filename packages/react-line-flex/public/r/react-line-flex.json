{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "react-line-flex",
  "type": "registry:component",
  "title": "React LINE Flex",
  "description": "A React component library for rendering LINE Flex Messages with Tailwind CSS",
  "dependencies": [
    "clsx",
    "tailwind-merge",
    "class-variance-authority"
  ],
  "files": [
    {
      "path": "src/components/box.tsx",
      "content": "import * as React from 'react';\nimport { cn } from '../lib/utils';\nimport {\n  getMarginClass,\n  getMarginStyle,\n  getSpacingClass,\n  getSpacingStyle,\n  getOffsetStyles,\n  getPaddingStyles,\n  getFlexClass,\n  getFlexStyle,\n  getCornerRadiusClass,\n  getCornerRadiusStyle,\n  getBorderWidthClass,\n  getBorderWidthStyle,\n  getBackgroundGradientStyle,\n  handleAction,\n} from '../helpers';\nimport {\n  layoutVariants,\n  positionVariants,\n  justifyContentVariants,\n  alignItemsVariants,\n} from '../variants';\nimport type { FlexBox, FlexComponent, FlexAction } from '../types';\n\n// Import component renderers\nimport { Button } from './button';\nimport { Filler } from './filler';\nimport { Icon } from './icon';\nimport { Image } from './image';\nimport { Separator } from './separator';\nimport { Spacer } from './spacer';\nimport { Text } from './text';\nimport { Video } from './video';\n\nexport type BoxProps = FlexBox & {\n  className?: string;\n  onAction?: (action: FlexAction) => void;\n};\n\n// Component renderer function\nexport function renderFlexComponent(\n  component: FlexComponent,\n  index: number,\n  layout?: 'horizontal' | 'vertical' | 'baseline',\n  onAction?: (action: FlexAction) => void\n): React.ReactNode {\n  const key = `${component.type}-${index}`;\n\n  switch (component.type) {\n    case 'box':\n      return <Box key={key} {...component} onAction={onAction} />;\n    case 'button':\n      return <Button key={key} {...component} onAction={onAction} />;\n    case 'filler':\n      return <Filler key={key} {...component} />;\n    case 'icon':\n      return <Icon key={key} {...component} />;\n    case 'image':\n      return <Image key={key} {...component} onAction={onAction} />;\n    case 'separator':\n      return <Separator key={key} {...component} layout={layout} />;\n    case 'spacer':\n      return <Spacer key={key} {...component} />;\n    case 'text':\n      return <Text key={key} {...component} onAction={onAction} />;\n    case 'video':\n      return <Video key={key} {...component} />;\n    default:\n      return null;\n  }\n}\n\nconst Box = React.forwardRef<HTMLDivElement, BoxProps>(\n  (\n    {\n      layout = 'vertical',\n      contents,\n      flex,\n      spacing,\n      margin,\n      paddingAll,\n      paddingTop,\n      paddingBottom,\n      paddingStart,\n      paddingEnd,\n      position,\n      offsetTop,\n      offsetBottom,\n      offsetStart,\n      offsetEnd,\n      backgroundColor,\n      borderColor,\n      borderWidth,\n      cornerRadius,\n      width,\n      maxWidth,\n      height,\n      maxHeight,\n      justifyContent,\n      alignItems,\n      background,\n      action,\n      onAction,\n      className,\n    },\n    ref\n  ) => {\n    const marginClass = getMarginClass(margin);\n    const marginStyle = getMarginStyle(margin);\n    const spacingClass = getSpacingClass(spacing);\n    const spacingStyle = getSpacingStyle(spacing);\n    const offsetStyles = getOffsetStyles(offsetTop, offsetBottom, offsetStart, offsetEnd);\n    const paddingStyles = getPaddingStyles(\n      paddingAll,\n      paddingTop,\n      paddingBottom,\n      paddingStart,\n      paddingEnd\n    );\n    const flexClass = getFlexClass(flex);\n    const flexStyle = getFlexStyle(flex);\n    const cornerRadiusClass = getCornerRadiusClass(cornerRadius);\n    const cornerRadiusStyle = getCornerRadiusStyle(cornerRadius);\n    const borderWidthClass = getBorderWidthClass(borderWidth);\n    const borderWidthStyle = getBorderWidthStyle(borderWidth);\n    const backgroundGradientStyle = getBackgroundGradientStyle(background);\n\n    const containerStyle: React.CSSProperties = {\n      ...marginStyle,\n      ...spacingStyle,\n      ...offsetStyles,\n      ...paddingStyles,\n      ...flexStyle,\n      ...cornerRadiusStyle,\n      ...borderWidthStyle,\n      ...backgroundGradientStyle,\n      ...(backgroundColor && { backgroundColor }),\n      ...(borderColor && { borderColor }),\n      ...(width && { width, maxWidth: width }),\n      ...(maxWidth && { maxWidth }),\n      ...(height && { height }),\n      ...(maxHeight && { maxHeight }),\n    };\n\n    const clickHandler = handleAction(action, onAction);\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          'overflow-hidden relative min-w-0 max-w-full',\n          layoutVariants({ layout }),\n          flexClass,\n          spacingClass,\n          marginClass,\n          cornerRadiusClass,\n          borderWidthClass,\n          borderWidth && 'border-solid',\n          position && positionVariants({ position }),\n          justifyContent && justifyContentVariants({ justifyContent }),\n          alignItems && alignItemsVariants({ alignItems }),\n          action && 'cursor-pointer',\n          className\n        )}\n        style={containerStyle}\n        onClick={clickHandler}\n      >\n        {contents.map((component: FlexComponent, index: number) =>\n          renderFlexComponent(component, index, layout, onAction)\n        )}\n      </div>\n    );\n  }\n);\n\nBox.displayName = 'Box';\n\nexport { Box };\n\n",
      "type": "registry:component"
    },
    {
      "path": "src/components/bubble.tsx",
      "content": "import * as React from 'react';\nimport { cn } from '../lib/utils';\nimport { handleAction } from '../helpers';\nimport { bubbleSizeVariants } from '../variants';\nimport { Box, renderFlexComponent } from './box';\nimport type { FlexBubble, FlexAction } from '../types';\n\nexport interface BubbleProps extends FlexBubble {\n  className?: string;\n  onAction?: (action: FlexAction) => void;\n}\n\nconst Bubble = React.forwardRef<HTMLDivElement, BubbleProps>(\n  (\n    {\n      size = 'mega',\n      direction = 'ltr',\n      header,\n      hero,\n      body,\n      footer,\n      styles,\n      action,\n      onAction,\n      className,\n    },\n    ref\n  ) => {\n    const clickHandler = handleAction(action, onAction);\n\n    const directionClass = direction === 'rtl' ? 'dir-rtl' : 'dir-ltr';\n\n    // Padding classes based on bubble size\n    const getPadding = (section: 'header' | 'body' | 'footer') => {\n      const sizeMap: Record<string, Record<string, string>> = {\n        nano: {\n          header: 'p-[10px]',\n          body: 'p-[10px] pt-[10px]',\n          footer: 'p-[10px]',\n        },\n        micro: {\n          header: 'p-[10px]',\n          body: 'p-[10px] pt-[10px]',\n          footer: 'p-[10px]',\n        },\n        deca: {\n          header: 'p-[11px_14px_13px]',\n          body: 'p-[11px_14px_13px]',\n          footer: 'p-[10px]',\n        },\n        hecto: {\n          header: 'p-[11px_14px_13px]',\n          body: 'p-[11px_14px_13px]',\n          footer: 'p-[10px]',\n        },\n        kilo: {\n          header: 'p-[13px]',\n          body: 'p-[13px]',\n          footer: 'p-[10px]',\n        },\n        mega: {\n          header: 'p-5',\n          body: 'p-5 pt-[19px]',\n          footer: 'p-[10px]',\n        },\n        giga: {\n          header: 'p-5',\n          body: 'p-5 pt-[19px]',\n          footer: 'p-[10px]',\n        },\n      };\n\n      return sizeMap[size]?.[section] || sizeMap.mega[section];\n    };\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          bubbleSizeVariants({ size }),\n          directionClass,\n          action && 'cursor-pointer',\n          className\n        )}\n        onClick={action && !onAction ? clickHandler : undefined}\n        dir={direction}\n      >\n        {/* Header */}\n        {header && (\n          <div\n            className={cn('flex-none', getPadding('header'))}\n            style={styles?.header?.backgroundColor ? { backgroundColor: styles.header.backgroundColor } : undefined}\n          >\n            <Box {...header} onAction={onAction} />\n          </div>\n        )}\n\n        {/* Hero */}\n        {hero && (\n          <div\n            className=\"flex-none\"\n            style={styles?.hero?.backgroundColor ? { backgroundColor: styles.hero.backgroundColor } : undefined}\n          >\n            {hero.type === 'box' ? (\n              <Box {...hero} onAction={onAction} />\n            ) : (\n              renderFlexComponent(hero, 0, undefined, onAction)\n            )}\n          </div>\n        )}\n\n        {/* Body */}\n        {body && (\n          <div\n            className={cn(\n              'flex-1 flex-col',\n              getPadding('body'),\n              footer && 'pb-[10px]'\n            )}\n            style={styles?.body?.backgroundColor ? { backgroundColor: styles.body.backgroundColor } : undefined}\n          >\n            <Box {...body} onAction={onAction} />\n          </div>\n        )}\n\n        {/* Footer */}\n        {footer && (\n          <div\n            className={cn('flex-none', getPadding('footer'))}\n            style={styles?.footer?.backgroundColor ? { backgroundColor: styles.footer.backgroundColor } : undefined}\n          >\n            <Box {...footer} onAction={onAction} />\n          </div>\n        )}\n      </div>\n    );\n  }\n);\n\nBubble.displayName = 'Bubble';\n\nexport { Bubble };\n\n",
      "type": "registry:component"
    },
    {
      "path": "src/components/button.tsx",
      "content": "import * as React from 'react';\nimport { cn } from '../lib/utils';\nimport {\n  getMarginClass,\n  getMarginStyle,\n  getOffsetStyles,\n  getFlexClass,\n  getFlexStyle,\n  handleAction,\n} from '../helpers';\nimport { positionVariants, gravityVariants, buttonStyleVariants } from '../variants';\nimport type { FlexButton, FlexAction } from '../types';\n\nexport type ButtonProps = FlexButton & {\n  className?: string;\n  onAction?: (action: FlexAction) => void;\n};\n\nconst Button = React.forwardRef<HTMLDivElement, ButtonProps>(\n  (\n    {\n      action,\n      flex,\n      margin,\n      position,\n      offsetTop,\n      offsetBottom,\n      offsetStart,\n      offsetEnd,\n      height = 'md',\n      style = 'link',\n      color,\n      gravity,\n      adjustMode,\n      onAction,\n      className,\n    },\n    ref\n  ) => {\n    const marginClass = getMarginClass(margin);\n    const marginStyle = getMarginStyle(margin);\n    const offsetStyles = getOffsetStyles(offsetTop, offsetBottom, offsetStart, offsetEnd);\n    const flexClass = getFlexClass(flex);\n    const flexStyle = getFlexStyle(flex);\n\n    const containerStyle: React.CSSProperties = {\n      ...marginStyle,\n      ...offsetStyles,\n      ...flexStyle,\n    };\n\n    const buttonStyle: React.CSSProperties = {\n      ...(color && (style === 'link' ? { color } : { backgroundColor: color })),\n    };\n\n    const clickHandler = handleAction(action, onAction);\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          'relative min-w-0',\n          flexClass,\n          marginClass,\n          position && positionVariants({ position }),\n          gravity && gravityVariants({ gravity }),\n          className\n        )}\n        style={containerStyle}\n      >\n        {action?.type === 'uri' ? (\n          <a\n            href={action.uri}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            className={cn(\n              buttonStyleVariants({ buttonStyle: style, height }),\n              'w-full'\n            )}\n            style={buttonStyle}\n            onClick={clickHandler}\n          >\n            <div className=\"whitespace-nowrap text-ellipsis overflow-hidden max-w-full\">\n              {action.label || 'Button'}\n            </div>\n          </a>\n        ) : (\n          <button\n            type=\"button\"\n            className={cn(\n              buttonStyleVariants({ buttonStyle: style, height }),\n              'w-full'\n            )}\n            style={buttonStyle}\n            onClick={clickHandler}\n          >\n            <div className=\"whitespace-nowrap text-ellipsis overflow-hidden max-w-full\">\n              {action.label || 'Button'}\n            </div>\n          </button>\n        )}\n      </div>\n    );\n  }\n);\n\nButton.displayName = 'Button';\n\nexport { Button };\n\n",
      "type": "registry:component"
    },
    {
      "path": "src/components/carousel.tsx",
      "content": "import * as React from 'react';\nimport { cn } from '../lib/utils';\nimport { Bubble } from './bubble';\nimport type { FlexCarousel, FlexAction } from '../types';\n\nexport interface CarouselProps extends FlexCarousel {\n  className?: string;\n  onAction?: (action: FlexAction) => void;\n}\n\nconst Carousel = React.forwardRef<HTMLDivElement, CarouselProps>(\n  ({ contents, onAction, className }, ref) => {\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          'overflow-x-auto overflow-y-hidden scrollbar-hide',\n          '-webkit-overflow-scrolling-touch',\n          className\n        )}\n      >\n        <div className=\"flex w-full gap-[9px] pl-[7px] after:content-[''] after:flex-none after:block after:w-[7px] after:h-px\">\n          {contents.map((bubble, index) => (\n            <Bubble\n              key={index}\n              {...bubble}\n              onAction={onAction}\n              className=\"flex-none w-[80%]\"\n            />\n          ))}\n        </div>\n      </div>\n    );\n  }\n);\n\nCarousel.displayName = 'Carousel';\n\nexport { Carousel };\n\n",
      "type": "registry:component"
    },
    {
      "path": "src/components/container.tsx",
      "content": "import * as React from 'react';\nimport { cn } from '../lib/utils';\nimport { Bubble } from './bubble';\nimport { Carousel } from './carousel';\nimport type { FlexMessage, FlexBubble, FlexCarousel, FlexAction } from '../types';\n\nexport interface ContainerProps {\n  /** The Flex Message content (Bubble or Carousel) */\n  content: FlexBubble | FlexCarousel;\n  /** Optional callback for handling actions */\n  onAction?: (action: FlexAction) => void;\n  /** Additional class names */\n  className?: string;\n}\n\n/**\n * Container component for rendering LINE Flex Messages\n * \n * @example\n * ```tsx\n * <Container\n *   content={flexMessage.contents}\n *   onAction={(action) => console.log(action)}\n * />\n * ```\n */\nconst Container = React.forwardRef<HTMLDivElement, ContainerProps>(\n  ({ content, onAction, className }, ref) => {\n    return (\n      <div ref={ref} className={cn('w-full', className)}>\n        {content.type === 'bubble' ? (\n          <Bubble {...content} onAction={onAction} />\n        ) : (\n          <Carousel {...content} onAction={onAction} />\n        )}\n      </div>\n    );\n  }\n);\n\nContainer.displayName = 'Container';\n\nexport { Container };\n\n",
      "type": "registry:component"
    },
    {
      "path": "src/components/filler.tsx",
      "content": "import * as React from 'react';\nimport { cn } from '../lib/utils';\nimport { getFlexClass, getFlexStyle } from '../helpers';\nimport type { FlexFiller } from '../types';\n\nexport interface FillerProps extends FlexFiller {\n  className?: string;\n}\n\nconst Filler = React.forwardRef<HTMLDivElement, FillerProps>(\n  ({ flex, className }, ref) => {\n    const flexClass = getFlexClass(flex);\n    const flexStyle = getFlexStyle(flex);\n\n    return (\n      <div\n        ref={ref}\n        className={cn('min-h-0', flexClass, className)}\n        style={flexStyle}\n      />\n    );\n  }\n);\n\nFiller.displayName = 'Filler';\n\nexport { Filler };\n\n",
      "type": "registry:component"
    },
    {
      "path": "src/components/icon.tsx",
      "content": "import * as React from 'react';\nimport { cn } from '../lib/utils';\nimport {\n  getSizeClass,\n  getSizeStyle,\n  getMarginClass,\n  getMarginStyle,\n  getOffsetStyles,\n} from '../helpers';\nimport { positionVariants } from '../variants';\nimport type { FlexIcon } from '../types';\n\nexport type IconProps = FlexIcon & {\n  className?: string;\n};\n\nconst Icon = React.forwardRef<HTMLDivElement, IconProps>(\n  (\n    {\n      url,\n      size = 'md',\n      aspectRatio,\n      margin,\n      position,\n      offsetTop,\n      offsetBottom,\n      offsetStart,\n      offsetEnd,\n      className,\n    },\n    ref\n  ) => {\n    const sizeClass = getSizeClass(size);\n    const sizeStyle = getSizeStyle(size);\n    const marginClass = getMarginClass(margin);\n    const marginStyle = getMarginStyle(margin);\n    const offsetStyles = getOffsetStyles(offsetTop, offsetBottom, offsetStart, offsetEnd);\n\n    // Calculate aspect ratio width\n    let width = '1em';\n    if (aspectRatio) {\n      const parts = aspectRatio.split(':').map(Number);\n      const [w, h] = parts;\n      if (w && h) {\n        width = `${w / h}em`;\n      }\n    }\n\n    const style: React.CSSProperties = {\n      ...sizeStyle,\n      ...marginStyle,\n      ...offsetStyles,\n    };\n\n    const iconStyle: React.CSSProperties = {\n      backgroundImage: `url('${url}')`,\n      width,\n      height: '1em',\n    };\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          'flex-none relative',\n          sizeClass,\n          marginClass,\n          position && positionVariants({ position }),\n          className\n        )}\n        style={style}\n      >\n        <span\n          className=\"inline-block overflow-hidden bg-center bg-no-repeat bg-contain align-baseline\"\n          style={iconStyle}\n        />\n      </div>\n    );\n  }\n);\n\nIcon.displayName = 'Icon';\n\nexport { Icon };\n\n",
      "type": "registry:component"
    },
    {
      "path": "src/components/image.tsx",
      "content": "import * as React from 'react';\nimport { cn } from '../lib/utils';\nimport {\n  getMarginClass,\n  getMarginStyle,\n  getOffsetStyles,\n  getFlexClass,\n  getFlexStyle,\n  handleAction,\n} from '../helpers';\nimport {\n  positionVariants,\n  gravityVariants,\n  aspectRatioVariants,\n  aspectModeVariants,\n} from '../variants';\nimport type { FlexImage, FlexAction } from '../types';\n\nexport type ImageProps = FlexImage & {\n  className?: string;\n  onAction?: (action: FlexAction) => void;\n};\n\nconst Image = React.forwardRef<HTMLDivElement, ImageProps>(\n  (\n    {\n      url,\n      flex,\n      margin,\n      position,\n      offsetTop,\n      offsetBottom,\n      offsetStart,\n      offsetEnd,\n      align,\n      gravity,\n      size = 'md',\n      aspectRatio,\n      aspectMode = 'fit',\n      backgroundColor,\n      action,\n      onAction,\n      className,\n    },\n    ref\n  ) => {\n    const marginClass = getMarginClass(margin);\n    const marginStyle = getMarginStyle(margin);\n    const offsetStyles = getOffsetStyles(offsetTop, offsetBottom, offsetStart, offsetEnd);\n    const flexClass = getFlexClass(flex);\n    const flexStyle = getFlexStyle(flex);\n\n    const imageSizeMap: Record<string, string> = {\n      xxs: 'w-[40px]',\n      xs: 'w-[60px]',\n      sm: 'w-[80px]',\n      md: 'w-[100px]',\n      lg: 'w-[120px]',\n      xl: 'w-[140px]',\n      xxl: 'w-[160px]',\n      '3xl': 'w-[180px]',\n      '4xl': 'w-[200px]',\n      '5xl': 'w-[220px]',\n      full: 'w-full',\n    };\n\n    const sizeClass = typeof size === 'string' && !size.includes('px') && !size.includes('%')\n      ? imageSizeMap[size] || 'w-[100px]'\n      : '';\n\n    const containerStyle: React.CSSProperties = {\n      ...marginStyle,\n      ...offsetStyles,\n      ...flexStyle,\n      ...(typeof size === 'string' && (size.includes('px') || size.includes('%')) && { width: size }),\n    };\n\n    const imageStyle: React.CSSProperties = {\n      backgroundImage: `url('${url}')`,\n      ...(backgroundColor && { backgroundColor }),\n    };\n\n    const clickHandler = handleAction(action, onAction);\n\n    const alignClass = align === 'start' ? 'items-start' : align === 'end' ? 'items-end' : 'items-center';\n    const gravityClass = gravity && gravityVariants({ gravity });\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          'flex items-center overflow-hidden relative min-w-0',\n          flexClass,\n          marginClass,\n          position && positionVariants({ position }),\n          alignClass,\n          gravityClass,\n          className\n        )}\n        style={containerStyle}\n      >\n        <div className={cn('max-w-full', sizeClass)}>\n          {action?.type === 'uri' ? (\n            <a\n              href={action.uri}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              className={cn(\n                'block relative w-full',\n                aspectRatio && aspectRatioVariants({ aspectRatio })\n              )}\n              onClick={clickHandler}\n            >\n              <span\n                className={cn(\n                  'block absolute inset-0 overflow-hidden bg-no-repeat bg-center',\n                  aspectMode && aspectModeVariants({ aspectMode })\n                )}\n                style={imageStyle}\n              />\n            </a>\n          ) : (\n            <div\n              className={cn(\n                'block relative w-full',\n                aspectRatio && aspectRatioVariants({ aspectRatio }),\n                action && 'cursor-pointer'\n              )}\n              onClick={clickHandler}\n            >\n              <span\n                className={cn(\n                  'block absolute inset-0 overflow-hidden bg-no-repeat bg-center',\n                  aspectMode && aspectModeVariants({ aspectMode })\n                )}\n                style={imageStyle}\n              />\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n);\n\nImage.displayName = 'Image';\n\nexport { Image };\n\n",
      "type": "registry:component"
    },
    {
      "path": "src/components/index.ts",
      "content": "export { Container } from './container';\nexport { Bubble } from './bubble';\nexport { Carousel } from './carousel';\nexport { Box, renderFlexComponent } from './box';\nexport { Button } from './button';\nexport { Image } from './image';\nexport { Video } from './video';\nexport { Icon } from './icon';\nexport { Text } from './text';\nexport { Span } from './span';\nexport { Separator } from './separator';\nexport { Filler } from './filler';\nexport { Spacer } from './spacer';\n\nexport type { ContainerProps } from './container';\nexport type { BubbleProps } from './bubble';\nexport type { CarouselProps } from './carousel';\nexport type { BoxProps } from './box';\nexport type { ButtonProps } from './button';\nexport type { ImageProps } from './image';\nexport type { VideoProps } from './video';\nexport type { IconProps } from './icon';\nexport type { TextProps } from './text';\nexport type { SpanProps } from './span';\nexport type { SeparatorProps } from './separator';\nexport type { FillerProps } from './filler';\nexport type { SpacerProps } from './spacer';\n\n",
      "type": "registry:component"
    },
    {
      "path": "src/components/separator.tsx",
      "content": "import * as React from 'react';\nimport { cn } from '../lib/utils';\nimport { getMarginClass, getMarginStyle } from '../helpers';\nimport type { FlexSeparator } from '../types';\n\nexport interface SeparatorProps extends FlexSeparator {\n  className?: string;\n  layout?: 'horizontal' | 'vertical' | 'baseline';\n}\n\nconst Separator = React.forwardRef<HTMLDivElement, SeparatorProps>(\n  ({ margin, color, className, layout = 'vertical' }, ref) => {\n    const marginClass = getMarginClass(margin);\n    const marginStyle = getMarginStyle(margin);\n\n    const style: React.CSSProperties = {\n      ...marginStyle,\n      ...(color && { borderColor: color }),\n    };\n\n    const isHorizontal = layout === 'horizontal' || layout === 'baseline';\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          'flex-none',\n          !isHorizontal ? 'w-full h-px border-t border-[#d4d6da]' : 'h-full w-px border-l border-[#d4d6da]',\n          marginClass,\n          className\n        )}\n        style={style}\n      />\n    );\n  }\n);\n\nSeparator.displayName = 'Separator';\n\nexport { Separator };\n\n",
      "type": "registry:component"
    },
    {
      "path": "src/components/spacer.tsx",
      "content": "import * as React from 'react';\nimport { cn } from '../lib/utils';\nimport type { FlexSpacer } from '../types';\n\nexport type SpacerProps = FlexSpacer & {\n  className?: string;\n};\n\nconst Spacer = React.forwardRef<HTMLDivElement, SpacerProps>(\n  ({ size = 'md', className }, ref) => {\n    const sizeMap: Record<string, string> = {\n      xxs: 'h-[2px]',\n      xs: 'h-[2px]',\n      sm: 'h-[4px]',\n      md: 'h-[8px]',\n      lg: 'h-[12px]',\n      xl: 'h-[16px]',\n      xxl: 'h-[20px]',\n      '3xl': 'h-[20px]',\n      '4xl': 'h-[20px]',\n      '5xl': 'h-[20px]',\n    };\n\n    const sizeClass = typeof size === 'string' && !size.includes('px')\n      ? sizeMap[size] || 'h-[8px]'\n      : '';\n\n    const style: React.CSSProperties = typeof size === 'string' && size.includes('px')\n      ? { height: size }\n      : {};\n\n    return (\n      <div\n        ref={ref}\n        className={cn('flex-none w-px', sizeClass, className)}\n        style={style}\n      />\n    );\n  }\n);\n\nSpacer.displayName = 'Spacer';\n\nexport { Spacer };\n\n",
      "type": "registry:component"
    },
    {
      "path": "src/components/span.tsx",
      "content": "import * as React from 'react';\nimport { cn } from '../lib/utils';\nimport { getSizeClass, getSizeStyle } from '../helpers';\nimport { weightVariants, styleVariants, decorationVariants } from '../variants';\nimport type { FlexSpan } from '../types';\n\nexport interface SpanProps extends FlexSpan {\n  className?: string;\n}\n\nconst Span = React.forwardRef<HTMLSpanElement, SpanProps>(\n  ({ text, size, color, weight, style, decoration, className }, ref) => {\n    const sizeClass = getSizeClass(size);\n    const sizeStyle = getSizeStyle(size);\n\n    const inlineStyle: React.CSSProperties = {\n      ...sizeStyle,\n      ...(color && { color }),\n    };\n\n    return (\n      <span\n        ref={ref}\n        className={cn(\n          'inherit',\n          sizeClass,\n          weight && weightVariants({ weight }),\n          style && styleVariants({ style }),\n          decoration && decorationVariants({ decoration }),\n          className\n        )}\n        style={inlineStyle}\n      >\n        {text}\n      </span>\n    );\n  }\n);\n\nSpan.displayName = 'Span';\n\nexport { Span };\n\n",
      "type": "registry:component"
    },
    {
      "path": "src/components/text.tsx",
      "content": "import * as React from 'react';\nimport { cn } from '../lib/utils';\nimport {\n  getSizeClass,\n  getSizeStyle,\n  getMarginClass,\n  getMarginStyle,\n  getOffsetStyles,\n  getFlexClass,\n  getFlexStyle,\n  handleAction,\n} from '../helpers';\nimport {\n  positionVariants,\n  weightVariants,\n  styleVariants,\n  decorationVariants,\n  alignVariants,\n  gravityVariants,\n} from '../variants';\nimport { Span } from './span';\nimport type { FlexText, FlexSpan, FlexAction } from '../types';\n\nexport type TextProps = FlexText & {\n  className?: string;\n  onAction?: (action: FlexAction) => void;\n};\n\nconst Text = React.forwardRef<HTMLDivElement, TextProps>(\n  (\n    {\n      text,\n      contents,\n      flex,\n      margin,\n      position,\n      offsetTop,\n      offsetBottom,\n      offsetStart,\n      offsetEnd,\n      size = 'md',\n      align,\n      gravity,\n      wrap = false,\n      maxLines,\n      weight,\n      color,\n      style,\n      decoration,\n      lineSpacing,\n      action,\n      onAction,\n      className,\n    },\n    ref\n  ) => {\n    const sizeClass = getSizeClass(size);\n    const sizeStyle = getSizeStyle(size);\n    const marginClass = getMarginClass(margin);\n    const marginStyle = getMarginStyle(margin);\n    const offsetStyles = getOffsetStyles(offsetTop, offsetBottom, offsetStart, offsetEnd);\n    const flexClass = getFlexClass(flex);\n    const flexStyle = getFlexStyle(flex);\n\n    const containerStyle: React.CSSProperties = {\n      ...sizeStyle,\n      ...marginStyle,\n      ...offsetStyles,\n      ...flexStyle,\n    };\n\n    const textStyle: React.CSSProperties = {\n      ...(color && { color }),\n      ...(lineSpacing && {\n        lineHeight: `${parseInt(lineSpacing.replace('px', '')) + 15}px`,\n      }),\n      ...(maxLines && {\n        display: '-webkit-box',\n        WebkitLineClamp: maxLines,\n        WebkitBoxOrient: 'vertical',\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n      }),\n    };\n\n    const clickHandler = handleAction(action, onAction);\n\n    // Convert newlines to <br> tags\n    const textContent = text.replace(/\\n/g, '<br>');\n\n    const content = (\n      <>\n        {contents && contents.length > 0 ? (\n          <>\n            <span dangerouslySetInnerHTML={{ __html: textContent }} />\n            {contents.map((span: FlexSpan, index: number) => (\n              <Span key={index} {...span} />\n            ))}\n          </>\n        ) : (\n          <span dangerouslySetInnerHTML={{ __html: textContent }} />\n        )}\n      </>\n    );\n\n    const textElement = action?.type === 'uri' ? (\n      <a\n        href={action.uri}\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        className=\"text-inherit no-underline hover:underline\"\n        style={textStyle}\n        onClick={clickHandler}\n      >\n        {content}\n      </a>\n    ) : (\n      <p\n        className={cn(\n          !wrap && 'overflow-hidden text-ellipsis whitespace-nowrap',\n          wrap && 'break-words whitespace-normal'\n        )}\n        style={textStyle}\n        onClick={clickHandler}\n      >\n        {content}\n      </p>\n    );\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          'relative min-w-0',\n          flexClass,\n          sizeClass,\n          marginClass,\n          position && positionVariants({ position }),\n          weight && weightVariants({ weight }),\n          style && styleVariants({ style }),\n          decoration && decorationVariants({ decoration }),\n          align && alignVariants({ align }),\n          gravity && gravityVariants({ gravity }),\n          action && 'cursor-pointer',\n          className\n        )}\n        style={containerStyle}\n      >\n        {textElement}\n      </div>\n    );\n  }\n);\n\nText.displayName = 'Text';\n\nexport { Text };\n\n",
      "type": "registry:component"
    },
    {
      "path": "src/components/video.tsx",
      "content": "import * as React from 'react';\nimport { cn } from '../lib/utils';\nimport { aspectRatioVariants } from '../variants';\nimport type { FlexVideo } from '../types';\n\nexport interface VideoProps extends FlexVideo {\n  className?: string;\n}\n\nconst Video = React.forwardRef<HTMLDivElement, VideoProps>(\n  ({ url, previewUrl, aspectRatio = '16:9', className }, ref) => {\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          'w-full overflow-hidden',\n          aspectRatio && aspectRatioVariants({ aspectRatio }),\n          className\n        )}\n      >\n        <video\n          className=\"w-full h-full object-cover\"\n          poster={previewUrl}\n          controls\n        >\n          <source src={url} type=\"video/mp4\" />\n          <source src={url} type=\"video/ogg\" />\n          <source src={url} type=\"video/webm\" />\n          Your browser does not support the video tag.\n        </video>\n      </div>\n    );\n  }\n);\n\nVideo.displayName = 'Video';\n\nexport { Video };\n\n",
      "type": "registry:component"
    },
    {
      "path": "src/helpers.ts",
      "content": "import type { FlexAction, FlexMargin, FlexSpacing } from './types';\n\n/**\n * Convert margin/spacing to CSS class or inline style\n */\nexport function getMarginClass(margin?: FlexMargin | string): string {\n  if (!margin) return '';\n  \n  if (margin.includes('px') || margin.includes('%')) {\n    return ''; // Will be handled as inline style\n  }\n  \n  const marginMap: Record<string, string> = {\n    none: 'mt-0',\n    xs: 'mt-[2px]',\n    sm: 'mt-[4px]',\n    md: 'mt-[8px]',\n    lg: 'mt-[12px]',\n    xl: 'mt-[16px]',\n    xxl: 'mt-[20px]',\n  };\n  \n  return marginMap[margin] || '';\n}\n\nexport function getMarginStyle(margin?: FlexMargin | string): React.CSSProperties {\n  if (!margin || !margin.includes('px') && !margin.includes('%')) return {};\n  return { marginTop: margin };\n}\n\n/**\n * Convert spacing to CSS class or inline style\n */\nexport function getSpacingClass(spacing?: FlexSpacing | string): string {\n  if (!spacing) return '';\n  \n  if (spacing.includes('px') || spacing.includes('%')) {\n    return '';\n  }\n  \n  const spacingMap: Record<string, string> = {\n    none: 'gap-0',\n    xs: 'gap-[2px]',\n    sm: 'gap-[4px]',\n    md: 'gap-[8px]',\n    lg: 'gap-[12px]',\n    xl: 'gap-[16px]',\n    xxl: 'gap-[20px]',\n  };\n  \n  return spacingMap[spacing] || '';\n}\n\nexport function getSpacingStyle(spacing?: FlexSpacing | string): React.CSSProperties {\n  if (!spacing || !spacing.includes('px') && !spacing.includes('%')) return {};\n  return { gap: spacing };\n}\n\n/**\n * Get flex class from flex number\n */\nexport function getFlexClass(flex?: number): string {\n  if (flex === undefined || flex < 0) return 'flex-1';\n  if (flex === 0) return 'flex-none';\n  if (flex === 1) return 'flex-1';\n  if (flex === 2) return 'flex-[2]';\n  if (flex === 3) return 'flex-[3]';\n  return ''; // Will use inline style for larger values\n}\n\nexport function getFlexStyle(flex?: number): React.CSSProperties {\n  if (flex === undefined || flex < 0 || flex <= 3) return {};\n  return { flexGrow: flex };\n}\n\n/**\n * Get offset styles\n */\nexport function getOffsetStyles(\n  offsetTop?: string,\n  offsetBottom?: string,\n  offsetStart?: string,\n  offsetEnd?: string\n): React.CSSProperties {\n  const styles: React.CSSProperties = {};\n  \n  if (offsetTop) {\n    styles.top = offsetTop.includes('px') || offsetTop.includes('%') ? offsetTop : getOffsetValue(offsetTop);\n  }\n  if (offsetBottom) {\n    styles.bottom = offsetBottom.includes('px') || offsetBottom.includes('%') ? offsetBottom : getOffsetValue(offsetBottom);\n  }\n  if (offsetStart) {\n    styles.left = offsetStart.includes('px') || offsetStart.includes('%') ? offsetStart : getOffsetValue(offsetStart);\n  }\n  if (offsetEnd) {\n    styles.right = offsetEnd.includes('px') || offsetEnd.includes('%') ? offsetEnd : getOffsetValue(offsetEnd);\n  }\n  \n  return styles;\n}\n\nfunction getOffsetValue(offset: string): string {\n  const offsetMap: Record<string, string> = {\n    none: '0',\n    xs: '2px',\n    sm: '4px',\n    md: '8px',\n    lg: '12px',\n    xl: '16px',\n    xxl: '20px',\n  };\n  return offsetMap[offset] || '0';\n}\n\n/**\n * Get padding styles\n */\nexport function getPaddingStyles(\n  paddingAll?: string,\n  paddingTop?: string,\n  paddingBottom?: string,\n  paddingStart?: string,\n  paddingEnd?: string\n): React.CSSProperties {\n  const styles: React.CSSProperties = {};\n  \n  if (paddingAll) {\n    styles.padding = paddingAll.includes('px') || paddingAll.includes('%') ? paddingAll : getPaddingValue(paddingAll);\n  }\n  if (paddingTop) {\n    styles.paddingTop = paddingTop.includes('px') || paddingTop.includes('%') ? paddingTop : getPaddingValue(paddingTop);\n  }\n  if (paddingBottom) {\n    styles.paddingBottom = paddingBottom.includes('px') || paddingBottom.includes('%') ? paddingBottom : getPaddingValue(paddingBottom);\n  }\n  if (paddingStart) {\n    styles.paddingLeft = paddingStart.includes('px') || paddingStart.includes('%') ? paddingStart : getPaddingValue(paddingStart);\n  }\n  if (paddingEnd) {\n    styles.paddingRight = paddingEnd.includes('px') || paddingEnd.includes('%') ? paddingEnd : getPaddingValue(paddingEnd);\n  }\n  \n  return styles;\n}\n\nfunction getPaddingValue(padding: string): string {\n  const paddingMap: Record<string, string> = {\n    none: '0',\n    xs: '2px',\n    sm: '4px',\n    md: '8px',\n    lg: '12px',\n    xl: '16px',\n    xxl: '20px',\n  };\n  return paddingMap[padding] || '0';\n}\n\n/**\n * Get corner radius class\n */\nexport function getCornerRadiusClass(cornerRadius?: string): string {\n  if (!cornerRadius) return '';\n  \n  if (cornerRadius.includes('px')) {\n    return '';\n  }\n  \n  const radiusMap: Record<string, string> = {\n    none: 'rounded-none',\n    xs: 'rounded-[2px]',\n    sm: 'rounded-[4px]',\n    md: 'rounded-lg',\n    lg: 'rounded-[12px]',\n    xl: 'rounded-[16px]',\n    xxl: 'rounded-[20px]',\n  };\n  \n  return radiusMap[cornerRadius] || '';\n}\n\nexport function getCornerRadiusStyle(cornerRadius?: string): React.CSSProperties {\n  if (!cornerRadius || !cornerRadius.includes('px')) return {};\n  return { borderRadius: cornerRadius };\n}\n\n/**\n * Get border width class\n */\nexport function getBorderWidthClass(borderWidth?: string): string {\n  if (!borderWidth) return '';\n  \n  if (borderWidth.includes('px')) {\n    return '';\n  }\n  \n  const borderMap: Record<string, string> = {\n    none: 'border-0',\n    light: 'border-[0.5px]',\n    normal: 'border',\n    medium: 'border-2',\n    'semi-bold': 'border-[3px]',\n    bold: 'border-4',\n  };\n  \n  return borderMap[borderWidth] || '';\n}\n\nexport function getBorderWidthStyle(borderWidth?: string): React.CSSProperties {\n  if (!borderWidth || !borderWidth.includes('px')) return {};\n  return { borderWidth };\n}\n\n/**\n * Get background gradient style\n */\nexport function getBackgroundGradientStyle(background?: {\n  type: 'linearGradient';\n  angle: string;\n  startColor: string;\n  endColor: string;\n  centerColor?: string;\n  centerPosition?: string;\n}): React.CSSProperties {\n  if (!background || background.type !== 'linearGradient') return {};\n  \n  const { angle, startColor, endColor, centerColor, centerPosition = '50%' } = background;\n  \n  let gradient: string;\n  if (centerColor) {\n    gradient = `linear-gradient(${angle}, ${startColor} 0%, ${centerColor} ${centerPosition}, ${endColor} 100%)`;\n  } else {\n    gradient = `linear-gradient(${angle}, ${startColor} 0%, ${endColor} 100%)`;\n  }\n  \n  return { background: gradient };\n}\n\n/**\n * Handle action click\n */\nexport function handleAction(action?: FlexAction, onAction?: (action: FlexAction) => void) {\n  if (!action) return undefined;\n  \n  return (e: React.MouseEvent) => {\n    e.preventDefault();\n    \n    if (onAction) {\n      onAction(action);\n      return;\n    }\n    \n    // Default handlers\n    switch (action.type) {\n      case 'uri':\n        window.open(action.uri, '_blank', 'noopener,noreferrer');\n        break;\n      case 'message':\n        alert(`Message: ${action.text}`);\n        break;\n      case 'postback':\n        alert(`Postback: ${action.data}`);\n        break;\n    }\n  };\n}\n\n/**\n * Get size class for various components\n */\nexport function getSizeClass(size?: string): string {\n  if (!size) return '';\n  \n  if (size.includes('px') || size.includes('%')) {\n    return '';\n  }\n  \n  const sizeMap: Record<string, string> = {\n    xxs: 'text-[11px]',\n    xs: 'text-[13px]',\n    sm: 'text-[14px]',\n    md: 'text-base',\n    lg: 'text-[19px]',\n    xl: 'text-[22px]',\n    xxl: 'text-[29px]',\n    '3xl': 'text-[35px]',\n    '4xl': 'text-[48px]',\n    '5xl': 'text-[74px]',\n  };\n  \n  return sizeMap[size] || '';\n}\n\nexport function getSizeStyle(size?: string): React.CSSProperties {\n  if (!size || !size.includes('px') && !size.includes('%')) return {};\n  return { fontSize: size };\n}\n\n",
      "type": "registry:lib"
    },
    {
      "path": "src/lib/utils.ts",
      "content": "import { type ClassValue, clsx } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n",
      "type": "registry:lib"
    },
    {
      "path": "src/types.ts",
      "content": "// LINE Flex Message Types\n\nexport type FlexSize = 'xxs' | 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'xxl' | '3xl' | '4xl' | '5xl';\nexport type FlexSpacing = 'none' | 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'xxl';\nexport type FlexMargin = FlexSpacing;\nexport type FlexGravity = 'top' | 'bottom' | 'center';\nexport type FlexAlign = 'start' | 'end' | 'center';\nexport type FlexDecoration = 'none' | 'underline' | 'line-through';\nexport type FlexWeight = 'regular' | 'bold';\nexport type FlexStyle = 'normal' | 'italic';\nexport type FlexPosition = 'relative' | 'absolute';\nexport type FlexAspectRatio = '1:1' | '1.51:1' | '1.91:1' | '4:3' | '16:9' | '20:13' | '2:1' | '3:1' | '3:4' | '9:16' | '1:2' | '1:3';\nexport type FlexAspectMode = 'cover' | 'fit';\nexport type FlexLayout = 'horizontal' | 'vertical' | 'baseline';\nexport type FlexDirection = 'ltr' | 'rtl';\nexport type FlexJustifyContent = 'flex-start' | 'flex-end' | 'center' | 'space-between' | 'space-around' | 'space-evenly';\nexport type FlexAlignItems = 'flex-start' | 'flex-end' | 'center' | 'baseline' | 'stretch';\nexport type FlexBubbleSize = 'nano' | 'micro' | 'deca' | 'hecto' | 'kilo' | 'mega' | 'giga';\nexport type FlexButtonStyle = 'link' | 'primary' | 'secondary';\nexport type FlexButtonHeight = 'sm' | 'md';\nexport type FlexBorderWidth = 'none' | 'light' | 'normal' | 'medium' | 'semi-bold' | 'bold';\n\nexport type FlexAction = FlexURIAction | FlexMessageAction | FlexPostbackAction;\n\nexport interface FlexURIAction {\n  type: 'uri';\n  label?: string;\n  uri: string;\n  altUri?: {\n    desktop?: string;\n  };\n}\n\nexport interface FlexMessageAction {\n  type: 'message';\n  label?: string;\n  text: string;\n}\n\nexport interface FlexPostbackAction {\n  type: 'postback';\n  label?: string;\n  data: string;\n  displayText?: string;\n}\n\nexport interface FlexBackground {\n  type: 'linearGradient';\n  angle: string;\n  startColor: string;\n  endColor: string;\n  centerColor?: string;\n  centerPosition?: string;\n}\n\nexport interface FlexBox {\n  type: 'box';\n  layout: FlexLayout;\n  contents: FlexComponent[];\n  flex?: number;\n  spacing?: FlexSpacing | string;\n  margin?: FlexMargin | string;\n  paddingAll?: string;\n  paddingTop?: string;\n  paddingBottom?: string;\n  paddingStart?: string;\n  paddingEnd?: string;\n  position?: FlexPosition;\n  offsetTop?: string;\n  offsetBottom?: string;\n  offsetStart?: string;\n  offsetEnd?: string;\n  backgroundColor?: string;\n  borderColor?: string;\n  borderWidth?: FlexBorderWidth | string;\n  cornerRadius?: string;\n  width?: string;\n  maxWidth?: string;\n  height?: string;\n  maxHeight?: string;\n  justifyContent?: FlexJustifyContent;\n  alignItems?: FlexAlignItems;\n  background?: FlexBackground;\n  action?: FlexAction;\n}\n\nexport interface FlexButton {\n  type: 'button';\n  action: FlexAction;\n  flex?: number;\n  margin?: FlexMargin | string;\n  position?: FlexPosition;\n  offsetTop?: string;\n  offsetBottom?: string;\n  offsetStart?: string;\n  offsetEnd?: string;\n  height?: FlexButtonHeight;\n  style?: FlexButtonStyle;\n  color?: string;\n  gravity?: FlexGravity;\n  adjustMode?: 'shrink-to-fit';\n}\n\nexport interface FlexFiller {\n  type: 'filler';\n  flex?: number;\n}\n\nexport interface FlexIcon {\n  type: 'icon';\n  url: string;\n  size?: FlexSize | string;\n  aspectRatio?: FlexAspectRatio;\n  margin?: FlexMargin | string;\n  position?: FlexPosition;\n  offsetTop?: string;\n  offsetBottom?: string;\n  offsetStart?: string;\n  offsetEnd?: string;\n}\n\nexport interface FlexImage {\n  type: 'image';\n  url: string;\n  flex?: number;\n  margin?: FlexMargin | string;\n  position?: FlexPosition;\n  offsetTop?: string;\n  offsetBottom?: string;\n  offsetStart?: string;\n  offsetEnd?: string;\n  align?: FlexAlign;\n  gravity?: FlexGravity;\n  size?: FlexSize | string;\n  aspectRatio?: FlexAspectRatio;\n  aspectMode?: FlexAspectMode;\n  backgroundColor?: string;\n  action?: FlexAction;\n}\n\nexport interface FlexSeparator {\n  type: 'separator';\n  margin?: FlexMargin | string;\n  color?: string;\n}\n\nexport interface FlexSpacer {\n  type: 'spacer';\n  size?: FlexSize | string;\n}\n\nexport interface FlexText {\n  type: 'text';\n  text: string;\n  contents?: FlexSpan[];\n  flex?: number;\n  margin?: FlexMargin | string;\n  position?: FlexPosition;\n  offsetTop?: string;\n  offsetBottom?: string;\n  offsetStart?: string;\n  offsetEnd?: string;\n  size?: FlexSize | string;\n  align?: FlexAlign;\n  gravity?: FlexGravity;\n  wrap?: boolean;\n  maxLines?: number;\n  weight?: FlexWeight;\n  color?: string;\n  style?: FlexStyle;\n  decoration?: FlexDecoration;\n  lineSpacing?: string;\n  action?: FlexAction;\n}\n\nexport interface FlexSpan {\n  type: 'span';\n  text: string;\n  size?: FlexSize | string;\n  color?: string;\n  weight?: FlexWeight;\n  style?: FlexStyle;\n  decoration?: FlexDecoration;\n}\n\nexport interface FlexVideo {\n  type: 'video';\n  url: string;\n  previewUrl: string;\n  altContent?: FlexImage | FlexBox;\n  aspectRatio?: FlexAspectRatio;\n  action?: FlexAction;\n}\n\nexport type FlexComponent =\n  | FlexBox\n  | FlexButton\n  | FlexFiller\n  | FlexIcon\n  | FlexImage\n  | FlexSeparator\n  | FlexSpacer\n  | FlexText\n  | FlexVideo;\n\nexport interface FlexBubbleStyles {\n  header?: {\n    backgroundColor?: string;\n  };\n  hero?: {\n    backgroundColor?: string;\n  };\n  body?: {\n    backgroundColor?: string;\n  };\n  footer?: {\n    backgroundColor?: string;\n  };\n}\n\nexport interface FlexBubble {\n  type: 'bubble';\n  size?: FlexBubbleSize;\n  direction?: FlexDirection;\n  header?: FlexBox;\n  hero?: FlexBox | FlexImage | FlexVideo;\n  body?: FlexBox;\n  footer?: FlexBox;\n  styles?: FlexBubbleStyles;\n  action?: FlexAction;\n}\n\nexport interface FlexCarousel {\n  type: 'carousel';\n  contents: FlexBubble[];\n}\n\nexport interface FlexMessage {\n  type: 'flex';\n  altText: string;\n  contents: FlexBubble | FlexCarousel;\n}\n\n",
      "type": "registry:lib"
    },
    {
      "path": "src/variants.ts",
      "content": "import { cva } from 'class-variance-authority';\n\n// Size variants for text, icons, images\nexport const sizeVariants = cva('', {\n  variants: {\n    size: {\n      xxs: 'text-[11px]',\n      xs: 'text-[13px]',\n      sm: 'text-[14px]',\n      md: 'text-base',\n      lg: 'text-[19px]',\n      xl: 'text-[22px]',\n      xxl: 'text-[29px]',\n      '3xl': 'text-[35px]',\n      '4xl': 'text-[48px]',\n      '5xl': 'text-[74px]',\n    },\n  },\n  defaultVariants: {\n    size: 'md',\n  },\n});\n\n// Margin variants\nexport const marginVariants = cva('', {\n  variants: {\n    margin: {\n      none: 'mt-0',\n      xs: 'mt-[2px]',\n      sm: 'mt-[4px]',\n      md: 'mt-[8px]',\n      lg: 'mt-[12px]',\n      xl: 'mt-[16px]',\n      xxl: 'mt-[20px]',\n    },\n  },\n});\n\n// Spacing variants (for box gaps)\nexport const spacingVariants = cva('', {\n  variants: {\n    spacing: {\n      none: 'gap-0',\n      xs: 'gap-[2px]',\n      sm: 'gap-[4px]',\n      md: 'gap-[8px]',\n      lg: 'gap-[12px]',\n      xl: 'gap-[16px]',\n      xxl: 'gap-[20px]',\n    },\n  },\n});\n\n// Layout variants for Box\nexport const layoutVariants = cva('flex', {\n  variants: {\n    layout: {\n      horizontal: 'flex-row',\n      vertical: 'flex-col',\n      baseline: 'flex-row items-baseline',\n    },\n  },\n  defaultVariants: {\n    layout: 'vertical',\n  },\n});\n\n// Align variants\nexport const alignVariants = cva('', {\n  variants: {\n    align: {\n      start: 'text-start',\n      end: 'text-end',\n      center: 'text-center',\n    },\n  },\n});\n\n// Gravity variants (justify-content for flex)\nexport const gravityVariants = cva('', {\n  variants: {\n    gravity: {\n      top: 'justify-start',\n      center: 'justify-center',\n      bottom: 'justify-end',\n    },\n  },\n});\n\n// Position variants\nexport const positionVariants = cva('', {\n  variants: {\n    position: {\n      relative: 'relative',\n      absolute: 'absolute',\n    },\n  },\n  defaultVariants: {\n    position: 'relative',\n  },\n});\n\n// Text weight variants\nexport const weightVariants = cva('', {\n  variants: {\n    weight: {\n      regular: 'font-normal',\n      bold: 'font-bold',\n    },\n  },\n  defaultVariants: {\n    weight: 'regular',\n  },\n});\n\n// Text decoration variants\nexport const decorationVariants = cva('', {\n  variants: {\n    decoration: {\n      none: 'no-underline',\n      underline: 'underline',\n      'line-through': 'line-through',\n    },\n  },\n  defaultVariants: {\n    decoration: 'none',\n  },\n});\n\n// Text style variants\nexport const styleVariants = cva('', {\n  variants: {\n    style: {\n      normal: 'not-italic',\n      italic: 'italic',\n    },\n  },\n  defaultVariants: {\n    style: 'normal',\n  },\n});\n\n// Image size variants\nexport const imageSizeVariants = cva('', {\n  variants: {\n    size: {\n      xxs: 'w-[40px]',\n      xs: 'w-[60px]',\n      sm: 'w-[80px]',\n      md: 'w-[100px]',\n      lg: 'w-[120px]',\n      xl: 'w-[140px]',\n      xxl: 'w-[160px]',\n      '3xl': 'w-[180px]',\n      '4xl': 'w-[200px]',\n      '5xl': 'w-[220px]',\n      full: 'w-full',\n    },\n  },\n  defaultVariants: {\n    size: 'md',\n  },\n});\n\n// Aspect ratio variants\nexport const aspectRatioVariants = cva('relative overflow-hidden', {\n  variants: {\n    aspectRatio: {\n      '1:1': 'aspect-square',\n      '1.51:1': 'aspect-[151/100]',\n      '1.91:1': 'aspect-[191/100]',\n      '4:3': 'aspect-[4/3]',\n      '16:9': 'aspect-video',\n      '20:13': 'aspect-[20/13]',\n      '2:1': 'aspect-[2/1]',\n      '3:1': 'aspect-[3/1]',\n      '3:4': 'aspect-[3/4]',\n      '9:16': 'aspect-[9/16]',\n      '1:2': 'aspect-[1/2]',\n      '1:3': 'aspect-[1/3]',\n    },\n  },\n});\n\n// Aspect mode variants\nexport const aspectModeVariants = cva('', {\n  variants: {\n    aspectMode: {\n      fit: 'object-contain',\n      cover: 'object-cover',\n    },\n  },\n  defaultVariants: {\n    aspectMode: 'fit',\n  },\n});\n\n// Button style variants\nexport const buttonStyleVariants = cva(\n  'inline-flex items-center justify-center rounded-lg px-4 transition-colors whitespace-nowrap overflow-hidden text-ellipsis',\n  {\n    variants: {\n      buttonStyle: {\n        link: 'text-[#42659a] bg-transparent hover:underline',\n        primary: 'bg-[#17c950] text-white hover:bg-[#17c950]/90',\n        secondary: 'bg-[#dcdfe5] text-[#111111] hover:bg-[#dcdfe5]/90',\n      },\n      height: {\n        sm: 'h-[40px]',\n        md: 'h-[52px]',\n      },\n    },\n    defaultVariants: {\n      buttonStyle: 'link',\n      height: 'md',\n    },\n  }\n);\n\n// Bubble size variants\nexport const bubbleSizeVariants = cva('rounded-[17px] overflow-hidden bg-white flex flex-col', {\n  variants: {\n    size: {\n      nano: 'max-w-[120px] rounded-[10px]',\n      micro: 'max-w-[160px] rounded-[10px]',\n      deca: 'max-w-[220px] rounded-[10px]',\n      hecto: 'max-w-[241px] rounded-[10px]',\n      kilo: 'max-w-[260px] rounded-[10px]',\n      mega: 'max-w-[300px]',\n      giga: 'max-w-[500px] rounded-[5px]',\n    },\n  },\n  defaultVariants: {\n    size: 'mega',\n  },\n});\n\n// Border width variants\nexport const borderWidthVariants = cva('border-solid', {\n  variants: {\n    borderWidth: {\n      none: 'border-0',\n      light: 'border-[0.5px]',\n      normal: 'border',\n      medium: 'border-2',\n      'semi-bold': 'border-[3px]',\n      bold: 'border-4',\n    },\n  },\n});\n\n// Justify content variants\nexport const justifyContentVariants = cva('', {\n  variants: {\n    justifyContent: {\n      'flex-start': 'justify-start',\n      'flex-end': 'justify-end',\n      center: 'justify-center',\n      'space-between': 'justify-between',\n      'space-around': 'justify-around',\n      'space-evenly': 'justify-evenly',\n    },\n  },\n});\n\n// Align items variants\nexport const alignItemsVariants = cva('', {\n  variants: {\n    alignItems: {\n      'flex-start': 'items-start',\n      'flex-end': 'items-end',\n      center: 'items-center',\n      baseline: 'items-baseline',\n      stretch: 'items-stretch',\n    },\n  },\n});\n\n",
      "type": "registry:lib"
    },
    {
      "path": "src/styles.css",
      "content": "@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer utilities {\n  .scrollbar-hide::-webkit-scrollbar {\n    display: none;\n  }\n  \n  .scrollbar-hide {\n    -ms-overflow-style: none;\n    scrollbar-width: none;\n  }\n  \n  .-webkit-overflow-scrolling-touch {\n    -webkit-overflow-scrolling: touch;\n  }\n}\n\n",
      "type": "registry:lib"
    }
  ]
}